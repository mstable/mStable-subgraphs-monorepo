### This file is automatically generated ###

######## BEGIN IMPORTED DEFINITIONS ########

"""
An ERC20-compatible token
"""
type Token @entity {
    id: ID!

    """
    Token address
    """
    address: Bytes!

    """
    Token decimals
    """
    decimals: Int!

    """
    Token name
    """
    name: String!

    """
    Token symbol
    """
    symbol: String!

    """
    Total supply of the token
    """
    totalSupply: Metric!

    """
    Total quantity of tokens burned
    """
    totalBurned: Metric!

    """
    Total quantity of tokens minted
    """
    totalMinted: Metric!

    """
    Count of transfer transactions
    """
    totalTransfers: Counter!

    """
    Count of transfer transactions that minted the token
    """
    totalMints: Counter!

    """
    Count of transfer transactions that burned the token
    """
    totalBurns: Counter!
}

interface Transaction {
    """
    Transaction hash + log index
    """
    id: ID!

    """
    Transaction hash
    """
    hash: Bytes!

    """
    Block number the transaction is in
    """
    block: Int!

    """
    Timestamp of the block the transaction is in
    """
    timestamp: BigInt!

    """
    Address of the sender of the transaction
    """
    sender: Bytes!
}

type Metric @entity {
    id: ID!

    """
    Exact value of the metric, i.e. in base units as an integer
    """
    exact: BigInt!

    """
    Decimals used for the exact value (default: 18)
    """
    decimals: Int!

    """
    Simple value of the metric, i.e. the exact value represented as a decimal
    """
    simple: BigDecimal!
}

type Counter @entity {
    id: ID!

    """
    Value of the counter; should be positive
    """
    value: BigInt!
}

######### END IMPORTED DEFINITIONS #########



"""
Basket Asset (e.g. DAI for the mUSD basket)
"""
type Basset @entity {
  """
  Address of the Basset token contract
  """
  id: ID!

  """
  If a main pool asset, the Masset the Basset is associated with (optional)
  """
  masset: Token

  """
  Target weight of the Basset (mUSD only)
  """
  maxWeight: BigInt

  """
  Basset to Masset ratio for quantity conversion
  """
  ratio: BigInt!

  """
  Flag that is set when the bAsset is removed from the basket (and unset when added)
  """
  removed: Boolean!

  """
  Status of the Basset, e.g. 'Normal'
  """
  status: String!

  """
  An ERC20 can charge transfer fee, e.g. USDT or DGX tokens
  """
  isTransferFeeCharged: Boolean!

  """
  The underlying Token for the Basset
  """
  token: Token!

  """
  Amount of the Basset that is held in collateral
  """
  vaultBalance: Metric!

  """
  Total number of mint transactions in which the Basset was an input
  """
  totalMints: Counter!

  """
  Total number of swap transactions in which the Basset was an input
  """
  totalSwapsAsInput: Counter!

  """
  Total number of swap transactions in which the Basset was an output
  """
  totalSwapsAsOutput: Counter!

  """
  Total number of redemption transactions in which the Basset was an output
  """
  totalRedemptions: Counter!

  """
  Total supply of the Basset token
  """
  totalSupply: Metric!

  """
  Cumulative amount of the Basset that was used in mint transactions as input
  """
  cumulativeMinted: Metric!

  """
  Cumulative amount of the Basset that was used in swap transactions as output
  """
  cumulativeSwappedAsOutput: Metric!

  """
  Cumulative amount of the Basset that was used in redemption transactions as output (excluding proportional redemption)
  """
  cumulativeRedeemed: Metric!

  """
  Cumulative amount of fees paid (e.g. for swaps and redemptions) using this Basset
  """
  cumulativeFeesPaid: Metric!
}

"""
A Basket of Bassets
"""
type Basket @entity {
  id: ID!

  """
  The Bassets in the Basket
  """
  bassets: [Basset!]!

  """
  The collateralisation ratio of the Basket (mUSD only)
  """
  collateralisationRatio: BigInt

  """
  Max number of Bassets that can be present in the Basket
  """
  maxBassets: Int!

  """
  Flag for whether the Basket has failed
  """
  undergoingRecol: Boolean!

  """
  Flag for whether the Basket has failed
  """
  failed: Boolean!

  """
  FeederPool the Basket belongs to
  """
  feederPool: FeederPool @derivedFrom(field: "basket")
}

"""
Amplification value; amplifies the rate of change of the curve.
Lower A = higher rate of change = higher slippage.
"""
type AmpData @entity {
  id: ID!

  currentA: BigInt!

  targetA: BigInt!

  startTime: BigInt!

  rampEndTime: BigInt!
}

type BoostedSavingsVault @entity {
  # BoostedSavingsVault address
  id: ID!

  """
  The Feeder Pool associated with this vault
  """
  feederPool: FeederPool!

  accounts: [BoostedSavingsVaultAccount!]! @derivedFrom(field: "boostedSavingsVault")

  rewardEntries: [BoostedSavingsVaultRewardEntry!]! @derivedFrom(field: "boostedSavingsVault")

  """
  Length of token lockup (in seconds), after rewards are earned
  """
  lockupDuration: Int!

  """
  Percentage of earned tokens that are unlocked immediately upon claiming
  """
  unlockPercentage: BigInt!

  """
  Rewards period duration (in seconds)
  """
  periodDuration: Int!

  """
  Timestamp for current rewards period finish
  """
  periodFinish: Int!

  """
  Last time any user took action
  """
  lastUpdateTime: Int!

  """
  The staking token, e.g. imUSD
  """
  stakingToken: Token!

  """
  The reward per token stored
  """
  rewardPerTokenStored: BigInt!

  """
  The reward rate for the rest of the rewards period
  """
  rewardRate: BigInt!

  """
  The rewards token, e.g. MTA
  """
  rewardsToken: Token!

  """
  Rewards distributor contract address
  """
  rewardsDistributor: Bytes!

  """
  Staking rewards contract address
  """
  stakingContract: Bytes!

  """
  Total boosted amount
  """
  totalSupply: BigInt!

  """
  Total staking rewards (rewardRate * periodDuration)
  """
  totalStakingRewards: BigInt!

  stakeTransactions: [BoostedSavingsVaultStakeTransaction!]!
    @derivedFrom(field: "boostedSavingsVault")

  rewardAddedTransactions: [BoostedSavingsVaultRewardAddedTransaction!]!
    @derivedFrom(field: "boostedSavingsVault")

  rewardPaidTransactions: [BoostedSavingsVaultRewardPaidTransaction!]!
    @derivedFrom(field: "boostedSavingsVault")

  withdrawTransactions: [BoostedSavingsVaultWithdrawTransaction!]!
    @derivedFrom(field: "boostedSavingsVault")
}

type Account @entity {
  id: ID!

  boostedSavingsVaultAccounts: [BoostedSavingsVaultAccount!]! @derivedFrom(field: "account")

  feederPoolAccounts: [FeederPoolAccount!]! @derivedFrom(field: "account")
}

type BoostedSavingsVaultAccount @entity {
  # {BoostedSavingsVault address}.{account}
  id: ID!

  boostedSavingsVault: BoostedSavingsVault!

  account: Account!

  rawBalance: BigInt!

  boostedBalance: BigInt!

  rewardPerTokenPaid: BigInt!

  rewards: BigInt!

  lastAction: Int!

  lastClaim: Int!

  rewardCount: Int!

  cumulativeClaimed: Metric!

  rewardEntries: [BoostedSavingsVaultRewardEntry!]! @derivedFrom(field: "account")

  stakeTransactions: [BoostedSavingsVaultStakeTransaction!]! @derivedFrom(field: "account")

  rewardPaidTransactions: [BoostedSavingsVaultRewardPaidTransaction!]!
    @derivedFrom(field: "account")

  withdrawTransactions: [BoostedSavingsVaultWithdrawTransaction!]! @derivedFrom(field: "account")
}

type BoostedSavingsVaultRewardEntry @entity {
  # {BoostedSavingsVault address}.{account}.{index}
  id: ID!

  account: BoostedSavingsVaultAccount!

  boostedSavingsVault: BoostedSavingsVault!

  index: Int!

  start: Int!

  finish: Int!

  rate: BigInt!
}

type BoostedSavingsVaultStakeTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The BoostedSavingsVault the transaction relates to.
  """
  boostedSavingsVault: BoostedSavingsVault!

  """
  The amount staked.
  """
  amount: BigInt!

  """
  The account the staked amount is being added for.
  """
  account: BoostedSavingsVaultAccount!
}

type BoostedSavingsVaultRewardAddedTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The BoostedSavingsVault the transaction relates to.
  """
  boostedSavingsVault: BoostedSavingsVault!

  """
  The amount of rewards added.
  """
  amount: BigInt!
}

type BoostedSavingsVaultRewardPaidTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The BoostedSavingsVault the transaction relates to.
  """
  boostedSavingsVault: BoostedSavingsVault!

  """
  The amount of the reward paid.
  """
  amount: BigInt!

  """
  The account receiving the rewarded amount.
  """
  account: BoostedSavingsVaultAccount!
}

type BoostedSavingsVaultWithdrawTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The BoostedSavingsVault the transaction relates to.
  """
  boostedSavingsVault: BoostedSavingsVault!

  """
  The amount of the stake withdrawn.
  """
  amount: BigInt!

  """
  The account the stake is withdrawn for.
  """
  account: BoostedSavingsVaultAccount!
}

type FeederPool @entity {
  id: ID!
  ampData: AmpData!
  basket: Basket!
  cacheSize: BigInt!
  cumulativeFeesPaid: Metric!
  cumulativeInterestCollected: Metric!
  cumulativeInterestDistributed: Metric!
  cumulativeLiquidatorDeposited: Metric!
  cumulativeMinted: Metric!
  cumulativeRedeemed: Metric!
  cumulativeSwapped: Metric!
  dailyAPY: BigDecimal!
  invariantK: BigInt!
  fasset: Token!
  governanceFeeRate: BigInt!
  hardMax: BigInt!
  hardMin: BigInt!
  masset: Token!
  pendingFees: BigInt!
  price: BigInt!
  swapFeeRate: BigInt!
  redemptionFeeRate: BigInt!
  token: Token!
  totalMints: Counter!
  totalRedeemMassets: Counter!
  totalRedemptions: Counter!
  totalSupply: Metric!
  totalSwaps: Counter!

  mintMultiTransactions: [FPMintMultiTransaction!]! @derivedFrom(field: "feederPool")
  mintSingleTransactions: [FPMintSingleTransaction!]! @derivedFrom(field: "feederPool")
#  paidFeeTransactions: [FPPaidFeeTransaction!]! @derivedFrom(field: "feederPool")
  redeemTransactions: [FPRedeemTransaction!]! @derivedFrom(field: "feederPool")
  swapTransactions: [FPSwapTransaction!]! @derivedFrom(field: "feederPool")

  vault: BoostedSavingsVault! @derivedFrom(field: "feederPool")

  accounts: [FeederPoolAccount!]! @derivedFrom(field: "feederPool")
}

type FeederPoolAccount @entity {
  id: ID!

  account: Account!
  feederPool: FeederPool!

  cumulativeEarned: Metric!
  cumulativeEarnedVault: Metric!

  # Tracked on FP Token transfers
  balance: BigInt!
  price: BigInt!
  lastUpdate: Int!

  # Tracked on Vault stake/withdraw
  balanceVault: BigInt! # rawBalance
  priceVault: BigInt!
  lastUpdateVault: Int!
}

type FPSwapTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The Feeder Pool the transaction relates to.
  """
  feederPool: FeederPool!

  """
  The amount of the swap output in Masset units
  """
  massetUnits: BigInt!

  """
  The Basset used as the input for this swap.
  """
  inputBasset: Basset!

  """
  The Basset used as the output for this swap.
  """
  outputBasset: Basset!

  """
  The recipient of the swap output.
  """
  recipient: Bytes!
}

#type FPPaidFeeTransaction implements Transaction @entity {
#  id: ID!
#
#  hash: Bytes!
#
#  block: Int!
#
#  sender: Bytes!
#
#  timestamp: BigInt!
#
#  """
#  The Feeder Pool the transaction relates to.
#  """
#  feederPool: FeederPool!
#
#  """
#  The amount of the fee that was paid, in FeederPool token units.
#  """
#  massetUnits: BigInt!
#
#  """
#  The Basset the fee was paid in.
#  """
#  basset: Basset!
#
#  """
#  The amount of the fee that was paid, in Basset units.
#  """
#  bassetUnits: BigInt!
#}

type FPMintSingleTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  recipient: Bytes!

  timestamp: BigInt!

  """
  The Feeder Pool the transaction relates to.
  """
  feederPool: FeederPool!

  """
  The amount minted in Masset units.
  """
  massetUnits: BigInt!

  """
  The token used as the collateral asset for this mint.
  This can be fAsset, mAsset or mpAsset (main pool asset).
  """
  input: Token!

  """
  The amount of the Basset used for this mint, in Basset units.
  """
  bassetUnits: BigInt!
}

type FPMintMultiTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  recipient: Bytes!

  timestamp: BigInt!

  """
  The Feeder Pool the transaction relates to.
  """
  feederPool: FeederPool!

  """
  The amount minted in Masset units.
  """
  massetUnits: BigInt!

  """
  The tokens used as the collateral asset for this mint.
  This can be fAsset or mAsset.
  """
  inputs: [Basset!]!

  """
  The respective Basset units for each Basset used in this mint.
  """
  bassetsUnits: [BigInt!]!
}

type FPRedeemTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  recipient: Bytes!

  timestamp: BigInt!

  """
  The Feeder Pool the transaction relates to.
  """
  feederPool: FeederPool!

  """
  The amount redeemed in Masset units.
  """
  massetUnits: BigInt!

  """
  The Bassets selected as assets to redeem.
  """
  bassets: [Basset!]!

  """
  The respective units of each Basset selected to redeem.
  """
  bassetsUnits: [BigInt!]!
}
