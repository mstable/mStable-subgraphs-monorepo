# import Token
# import Transaction
# import Metric
# import Counter

type BoostedSavingsVault @entity {
  # BoostedSavingsVault address
  id: ID!

  accounts: [BoostedSavingsVaultAccount!]! @derivedFrom(field: "boostedSavingsVault")

  rewardEntries: [BoostedSavingsVaultRewardEntry!]! @derivedFrom(field: "boostedSavingsVault")

  """
  Length of token lockup (in seconds), after rewards are earned
  """
  lockupDuration: Int!

  """
  Percentage of earned tokens that are unlocked immediately upon claiming
  """
  unlockPercentage: BigInt!

  """
  Rewards period duration (in seconds)
  """
  periodDuration: Int!

  """
  Timestamp for current rewards period finish
  """
  periodFinish: Int!

  """
  Last time any user took action
  """
  lastUpdateTime: Int!

  """
  The staking token, e.g. imUSD
  """
  stakingToken: Token!

  """
  The reward per token stored
  """
  rewardPerTokenStored: BigInt!

  """
  The reward rate for the rest of the rewards period
  """
  rewardRate: BigInt!

  """
  The rewards token, e.g. MTA
  """
  rewardsToken: Token!

  """
  Rewards distributor contract address
  """
  rewardsDistributor: Bytes!

  """
  Staking rewards contract address
  """
  stakingContract: Bytes!

  """
  Total boosted amount
  """
  totalSupply: BigInt!

  """
  Total staking rewards (rewardRate * periodDuration)
  """
  totalStakingRewards: BigInt!

  stakeTransactions: [BoostedSavingsVaultStakeTransaction!]!
    @derivedFrom(field: "boostedSavingsVault")

  rewardAddedTransactions: [BoostedSavingsVaultRewardAddedTransaction!]!
    @derivedFrom(field: "boostedSavingsVault")

  rewardPaidTransactions: [BoostedSavingsVaultRewardPaidTransaction!]!
    @derivedFrom(field: "boostedSavingsVault")

  withdrawTransactions: [BoostedSavingsVaultWithdrawTransaction!]!
    @derivedFrom(field: "boostedSavingsVault")
}

type BoostedSavingsVaultAccount @entity {
  # {BoostedSavingsVault address}.{account}
  id: ID!

  account: Bytes!

  boostedSavingsVault: BoostedSavingsVault!

  rawBalance: BigInt!

  boostedBalance: BigInt!

  rewardPerTokenPaid: BigInt!

  rewards: BigInt!

  lastAction: Int!

  lastClaim: Int!

  rewardCount: Int!

  cumulativeClaimed: Metric!

  rewardEntries: [BoostedSavingsVaultRewardEntry!]! @derivedFrom(field: "account")

  stakeTransactions: [BoostedSavingsVaultStakeTransaction!]! @derivedFrom(field: "account")

  rewardPaidTransactions: [BoostedSavingsVaultRewardPaidTransaction!]!
    @derivedFrom(field: "account")

  withdrawTransactions: [BoostedSavingsVaultWithdrawTransaction!]! @derivedFrom(field: "account")
}

type BoostedSavingsVaultRewardEntry @entity {
  # {BoostedSavingsVault address}.{account}.{index}
  id: ID!

  account: BoostedSavingsVaultAccount!

  boostedSavingsVault: BoostedSavingsVault!

  index: Int!

  start: Int!

  finish: Int!

  rate: BigInt!
}

type BoostedSavingsVaultStakeTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The BoostedSavingsVault the transaction relates to.
  """
  boostedSavingsVault: BoostedSavingsVault!

  """
  The amount staked.
  """
  amount: BigInt!

  """
  The account the staked amount is being added for.
  """
  account: BoostedSavingsVaultAccount!
}

type BoostedSavingsVaultRewardAddedTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The BoostedSavingsVault the transaction relates to.
  """
  boostedSavingsVault: BoostedSavingsVault!

  """
  The amount of rewards added.
  """
  amount: BigInt!
}

type BoostedSavingsVaultRewardPaidTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The BoostedSavingsVault the transaction relates to.
  """
  boostedSavingsVault: BoostedSavingsVault!

  """
  The amount of the reward paid.
  """
  amount: BigInt!

  """
  The account receiving the rewarded amount.
  """
  account: BoostedSavingsVaultAccount!
}

type BoostedSavingsVaultWithdrawTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The BoostedSavingsVault the transaction relates to.
  """
  boostedSavingsVault: BoostedSavingsVault!

  """
  The amount of the stake withdrawn.
  """
  amount: BigInt!

  """
  The account the stake is withdrawn for.
  """
  account: BoostedSavingsVaultAccount!
}
