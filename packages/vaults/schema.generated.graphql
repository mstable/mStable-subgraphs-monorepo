### This file is automatically generated ###

######## BEGIN IMPORTED DEFINITIONS ########

"""
An ERC20-compatible token
"""
type Token @entity {
    id: ID!

    """
    Token address
    """
    address: Bytes!

    """
    Token decimals
    """
    decimals: Int!

    """
    Token name
    """
    name: String!

    """
    Token symbol
    """
    symbol: String!

    """
    Total supply of the token
    """
    totalSupply: Metric!

    """
    Total quantity of tokens burned
    """
    totalBurned: Metric!

    """
    Total quantity of tokens minted
    """
    totalMinted: Metric!

    """
    Count of transfer transactions
    """
    totalTransfers: Counter!

    """
    Count of transfer transactions that minted the token
    """
    totalMints: Counter!

    """
    Count of transfer transactions that burned the token
    """
    totalBurns: Counter!
}

interface Transaction {
    """
    Transaction hash + log index
    """
    id: ID!

    """
    Transaction hash
    """
    hash: Bytes!

    """
    Block number the transaction is in
    """
    block: Int!

    """
    Timestamp of the block the transaction is in
    """
    timestamp: BigInt!

    """
    Address of the sender of the transaction
    """
    sender: Bytes!
}

type Metric @entity {
    id: ID!

    """
    Exact value of the metric, i.e. in base units as an integer
    """
    exact: BigInt!

    """
    Decimals used for the exact value (default: 18)
    """
    decimals: Int!

    """
    Simple value of the metric, i.e. the exact value represented as a decimal
    """
    simple: BigDecimal!
}

type Counter @entity {
    id: ID!

    """
    Value of the counter; should be positive
    """
    value: BigInt!
}

######### END IMPORTED DEFINITIONS #########



type BoostedSavingsVault @entity {
  # BoostedSavingsVault address
  id: ID!

  savingsContract: Bytes!

  accounts: [BoostedSavingsVaultAccount!]! @derivedFrom(field: "boostedSavingsVault")

  rewardEntries: [BoostedSavingsVaultRewardEntry!]! @derivedFrom(field: "boostedSavingsVault")

  """
  Length of token lockup (in seconds), after rewards are earned
  """
  lockupDuration: Int!

  """
  Percentage of earned tokens that are unlocked immediately upon claiming
  """
  unlockPercentage: BigInt!

  """
  Rewards period duration (in seconds)
  """
  periodDuration: Int!

  """
  Timestamp for current rewards period finish
  """
  periodFinish: Int!

  """
  Last time any user took action
  """
  lastUpdateTime: Int!

  """
  The staking token, e.g. imUSD
  """
  stakingToken: Token!

  """
  The reward per token stored
  """
  rewardPerTokenStored: BigInt!

  """
  The reward rate for the rest of the rewards period
  """
  rewardRate: BigInt!

  """
  The rewards token, e.g. MTA
  """
  rewardsToken: Token!

  """
  Rewards distributor contract address
  """
  rewardsDistributor: Bytes!

  """
  Staking rewards contract address
  """
  stakingContract: Bytes!

  """
  Total boosted amount
  """
  totalSupply: BigInt!

  """
  Total staking rewards (rewardRate * periodDuration)
  """
  totalStakingRewards: BigInt!

  stakeTransactions: [BoostedSavingsVaultStakeTransaction!]!
  @derivedFrom(field: "boostedSavingsVault")

  rewardAddedTransactions: [BoostedSavingsVaultRewardAddedTransaction!]!
  @derivedFrom(field: "boostedSavingsVault")

  rewardPaidTransactions: [BoostedSavingsVaultRewardPaidTransaction!]!
  @derivedFrom(field: "boostedSavingsVault")

  withdrawTransactions: [BoostedSavingsVaultWithdrawTransaction!]!
  @derivedFrom(field: "boostedSavingsVault")
}

type BoostedSavingsVaultAccount @entity {
  # {BoostedSavingsVault address}.{account}
  id: ID!

  boostedSavingsVault: BoostedSavingsVault!

  account: Bytes!

  rawBalance: BigInt!

  boostedBalance: BigInt!

  rewardPerTokenPaid: BigInt!

  rewards: BigInt!

  lastAction: Int!

  lastClaim: Int!

  rewardCount: Int!

  rewardEntries: [BoostedSavingsVaultRewardEntry!]! @derivedFrom(field: "account")

  stakeTransactions: [BoostedSavingsVaultStakeTransaction!]! @derivedFrom(field: "account")

  rewardPaidTransactions: [BoostedSavingsVaultRewardPaidTransaction!]!
  @derivedFrom(field: "account")

  withdrawTransactions: [BoostedSavingsVaultWithdrawTransaction!]! @derivedFrom(field: "account")
}

type BoostedSavingsVaultRewardEntry @entity {
  # {BoostedSavingsVault address}.{account}.{index}
  id: ID!

  account: BoostedSavingsVaultAccount!

  boostedSavingsVault: BoostedSavingsVault!

  index: Int!

  start: Int!

  finish: Int!

  rate: BigInt!
}

type ExchangeRate @entity {
  id: ID!

  """
  The exchange rate; this is used to derive the `totalSavings` on the Savings Contract;
  totalCredits * exchangeRate = totalSavings
  """
  rate: BigDecimal!

  """
  The timestamp at which the rate was created.
  """
  timestamp: Int!

  """
  The SavingsContract this ExchangeRate relates to.
  """
  savingsContract: Bytes!

  """
  The next exchange rate for the savings contract (by timestamp); used for calculating APY.
  """
  next: ExchangeRate
}

type SwapTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The Masset the transaction relates to.
  """
  masset: Bytes!

  """
  The amount of the swap output in Masset units
  """
  massetUnits: BigInt!

  """
  The Basset used as the input for this swap.
  """
  inputBasset: Bytes!

  """
  The Basset used as the output for this swap.
  """
  outputBasset: Bytes!

  """
  The recipient of the swap output.
  """
  recipient: Bytes!
}

type PaidFeeTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The Masset the transaction relates to.
  """
  masset: Bytes!

  """
  The amount of the fee that was paid, in Masset units.
  """
  massetUnits: BigInt!

  """
  The Basset the fee was paid in.
  """
  basset: Bytes!

  """
  The amount of the fee that was paid, in Basset units.
  """
  bassetUnits: BigInt!
}

type MintSingleTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  recipient: Bytes!

  timestamp: BigInt!

  """
  The Masset the transaction relates to.
  """
  masset: Bytes!

  """
  The amount of the Masset minted, in Masset units.
  """
  massetUnits: BigInt!

  """
  The Basset used as the collateral asset for this mint.
  """
  basset: Bytes!

  """
  The amount of the Basset used for this mint, in Basset units.
  """
  bassetUnits: BigInt!
}

type MintMultiTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  recipient: Bytes!

  timestamp: BigInt!

  """
  The Masset the transaction relates to.
  """
  masset: Bytes!

  """
  The amount of the Masset minted, in Masset units.
  """
  massetUnits: BigInt!

  """
  The Bassets used as collateral assets for this mint.
  """
  bassets: [Bytes!]!

  """
  The respective Basset units for each Basset used in this mint.
  """
  bassetsUnits: [BigInt!]!
}

type RedeemTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  recipient: Bytes!

  timestamp: BigInt!

  """
  The Masset the transaction relates to.
  """
  masset: Bytes!

  """
  The amount redeemed in Masset units.
  """
  massetUnits: BigInt!

  """
  The Bassets selected as assets to redeem.
  """
  bassets: [Bytes!]!

  """
  The respective units of each Basset selected to redeem.
  """
  bassetsUnits: [BigInt!]!
}

type RedeemMassetTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  recipient: Bytes!

  timestamp: BigInt!

  """
  The Masset the transaction relates to.
  """
  masset: Bytes!

  """
  The amount redeemed in Masset units.
  """
  massetUnits: BigInt!
}

type SavingsContractDepositTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The SavingsContract the transaction relates to.
  """
  savingsContract: Bytes!

  """
  The amount deposited.
  """
  amount: BigInt!
}

type SavingsContractWithdrawTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The SavingsContract the transaction relates to.
  """
  savingsContract: Bytes!

  """
  The amount withdrawn.
  """
  amount: BigInt!
}

type BoostedSavingsVaultStakeTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The BoostedSavingsVault the transaction relates to.
  """
  boostedSavingsVault: BoostedSavingsVault!

  """
  The amount staked.
  """
  amount: BigInt!

  """
  The account the staked amount is being added for.
  """
  account: BoostedSavingsVaultAccount!
}

type BoostedSavingsVaultRewardAddedTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The BoostedSavingsVault the transaction relates to.
  """
  boostedSavingsVault: BoostedSavingsVault!

  """
  The amount of rewards added.
  """
  amount: BigInt!
}

type BoostedSavingsVaultRewardPaidTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The BoostedSavingsVault the transaction relates to.
  """
  boostedSavingsVault: BoostedSavingsVault!

  """
  The amount of the reward paid.
  """
  amount: BigInt!

  """
  The account receiving the rewarded amount.
  """
  account: BoostedSavingsVaultAccount!
}

type BoostedSavingsVaultWithdrawTransaction implements Transaction @entity {
  id: ID!

  hash: Bytes!

  block: Int!

  sender: Bytes!

  timestamp: BigInt!

  """
  The BoostedSavingsVault the transaction relates to.
  """
  boostedSavingsVault: BoostedSavingsVault!

  """
  The amount of the stake withdrawn.
  """
  amount: BigInt!

  """
  The account the stake is withdrawn for.
  """
  account: BoostedSavingsVaultAccount!
}
