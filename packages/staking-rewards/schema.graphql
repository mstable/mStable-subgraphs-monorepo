# import Token
# import Transaction
# import Metric
# import Counter

enum StakingRewardsContractType {
    STAKING_REWARDS
    STAKING_REWARDS_WITH_PLATFORM_TOKEN
}

enum StakingRewardType {
    REWARD
    PLATFORM_REWARD
}

type RewardsDistributor @entity {
    """
    ID of the rewards distributor contract
    """
    id: ID!

    """
    Whitelisted fund managers
    """
    fundManagers: [Bytes!]!
}

type StakingReward @entity {
    # contract + account
    id: ID!

    """
    Reward amount
    """
    amount: BigInt!

    """
    The reward amount per token paid
    """
    amountPerTokenPaid: BigInt!

    """
    The staking rewards contract this reward is kept on
    """
    stakingRewardsContract: StakingRewardsContract!

    """
    The account the reward belongs to
    """
    account: Bytes!

    """
    The type of staking reward, e.g. "REWARD" or "PLATFORM_REWARD"
  """
    type: StakingRewardType!
}

type StakingRewardsContract @entity {
    """
    ID of the staking rewards contract
    """
    id: ID!

    """
    The type of staking rewards contract, e.g. `STAKING_REWARDS` or `STAKING_REWARDS_WITH_PLATFORM_TOKEN`
    """
    type: StakingRewardsContractType!

    """
    Duration
    """
    duration: Int!

    """
    Period finish
    """
    periodFinish: Int!

    """
    Last update time
    """
    lastUpdateTime: Int!

    """
    Staking token
    """
    stakingToken: Token!

    """
    Reward per token stored
    """
    rewardPerTokenStored: BigInt!

    """
    Reward rate
    """
    rewardRate: BigInt!

    """
    Rewards token
    """
    rewardsToken: Token!

    """
    Rewards distributor
    """
    rewardsDistributor: RewardsDistributor!

    """
    Total supply
    """
    totalSupply: BigInt!

    """
    Total staking rewards
    """
    totalStakingRewards: BigInt!

    """
    Accessor for staking balances kept on this contract
    """
    stakingBalances: [StakingBalance!]!
    @derivedFrom(field: "stakingRewardsContract")

    """
    Accessor for staking rewards kept on this contract
    """
    stakingRewards: [StakingReward!]!
    @derivedFrom(field: "stakingRewardsContract")

    """
    Accessor for claim reward transactions sent to this contract
    """
    claimRewardTransactions: [StakingRewardsContractClaimRewardTransaction!]!
    @derivedFrom(field: "stakingRewardsContract")

    """
    Accessor for stake transactions sent to this contract
    """
    stakeTransactions: [StakingRewardsContractStakeTransaction!]!
    @derivedFrom(field: "stakingRewardsContract")

    """
    Accessor for withdraw transactions sent to this contract
    """
    withdrawTransactions: [StakingRewardsContractWithdrawTransaction!]!
    @derivedFrom(field: "stakingRewardsContract")

    #######################################################
    # For type `STAKING_REWARDS_WITH_PLATFORM_TOKEN` only #

    """
    Platform token
    """
    platformToken: Token

    """
    Platform reward rate
    """
    platformRewardRate: BigInt

    """
    Platform reward per token stored
    """
    platformRewardPerTokenStored: BigInt

    """
    Total platform rewards
    """
    totalPlatformRewards: BigInt

    #######################################################
}

type StakingBalance @entity {
    # stakingRewardsContract + account
    id: ID!

    """
    Account this staking balance belongs to
    """
    account: Bytes!

    """
    Staking rewards contract this staking balance is kept on
    """
    stakingRewardsContract: StakingRewardsContract!

    """
    Staking balance amount
    """
    amount: BigInt!
}

type StakingRewardsContractClaimRewardTransaction implements Transaction @entity {
    id: ID!

    hash: Bytes!


    sender: Bytes!

    block: Int!

    timestamp: BigInt!

    stakingRewardsContract: StakingRewardsContract!

    amount: BigInt!
}

type StakingRewardsContractStakeTransaction implements Transaction @entity {
    id: ID!

    hash: Bytes!


    sender: Bytes!

    block: Int!

    timestamp: BigInt!

    stakingRewardsContract: StakingRewardsContract!

    amount: BigInt!
}

type StakingRewardsContractWithdrawTransaction implements Transaction @entity {
    id: ID!

    hash: Bytes!


    sender: Bytes!

    block: Int!

    timestamp: BigInt!

    stakingRewardsContract: StakingRewardsContract!

    amount: BigInt!
}
