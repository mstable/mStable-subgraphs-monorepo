# import Token
# import Transaction
# import Metric
# import Counter

type StakedTokenBalance @entity {
    id: ID!

    account: StakedTokenAccount!

    stakedToken: StakedToken!

    # Units of staking token that has been deposited and consequently wrapped
    raw: BigInt!

    # (block.timestamp - weightedTimestamp) represents the seconds a user has had their full raw balance wrapped.
    # If they deposit or withdraw, the weightedTimestamp is dragged towards block.timestamp proportionately
    weightedTimestamp: Int!

    # multiplier duplicated from QuestManager
    questMultiplier: Int!

    # multiplier awarded for staking for a long time
    timeMultiplier: Int!

    # Time at which the relative cooldown began
    cooldownTimestamp: Int!

    # Units up for cooldown
    cooldownUnits: BigInt!

    # Current votes balance
    votes: BigInt!

    # User price coefficient
    userPriceCoefficient: BigInt!
}

# Quests can either give permanent rewards or only for the season
enum QuestType {
    PERMANENT,
    SEASONAL
}

# Quests can be turned off by the questMaster. All those who already completed remain
enum QuestStatus {
    ACTIVE,
    EXPIRED
}

type Quest @entity {
    id: ID!

    # Type of quest rewards
    type: QuestType!

    # Multiplier, from 1 == 1.01x to 100 == 2.00x
    multiplier: Int!

    # Is the current quest valid?
    status: QuestStatus!

    # Expiry date in seconds for the quest
    expiry: Int!

    # Season the quest belongs to (if applicable)
    season: Season

    # Accounts that completed this Quest
    completions: [CompletedQuest!]! @derivedFrom(field: "quest")
}

type Season @entity {
    id: ID!

    seasonNumber: Int!

    startedAt: Int!

    endedAt: Int

    quests: [Quest!]! @derivedFrom(field: "season")
}

type CompletedQuest @entity {
    id: ID!

    account: Account!

    quest: Quest!

    completedAt: Int!
}

type StakedToken @entity {
    # StakedToken contract address
    id: ID!

    # The non-transferrable StakedToken
    token: Token!

    # Core token that is staked and tracked (e.g. MTA)
    stakingToken: Token!

    # Staking rewards data
    stakingRewards: StakingRewards!

    # Contract that manages user quests
    questManager: QuestManager!

    # Seconds a user must wait after she initiates her cooldown before withdrawal is possible
    COOLDOWN_SECONDS: BigInt!

    # Window in which it is possible to withdraw, following the cooldown period
    UNSTAKE_WINDOW: BigInt!

    # Percentage of collateralisation where 100% = 1e18
    collateralisationRatio: BigInt!

    # Slash % where 100% = 1e18
    slashingPercentage: BigInt!

    # For StakedTokenBPT
    priceCoefficient: BigInt

    # Flag for whether this is StakedTokenBPT
    isStakedTokenBPT: Boolean!

    # Flag for whether this is StakedTokenMTA
    isStakedTokenMTA: Boolean!

    accounts: [StakedTokenAccount!]! @derivedFrom(field: "stakedToken")
}

type StakingRewards @entity {
    id: ID!

    # Timestamp for current period finish
    periodFinish: Int!

    # Last time any user took action
    lastUpdateTime: Int!

    # RewardRate for the rest of the period
    rewardRate: BigInt!

    # Ever increasing rewardPerToken rate, based on % of total supply
    rewardPerTokenStored: BigInt!

    # Token the rewards are distributed in. eg MTA
    rewardsToken: Token!

    # Contract that holds the platform tokens
    rewardsTokenVendor: Bytes!

    # Rewards distributor address
    rewardsDistributor: Bytes!

    # Pending additional reward (if any)
    pendingAdditionalReward: BigInt!

    # Length of each staking period in seconds. 7 days = 604,800; 3 months = 7,862,400
    DURATION: Int
}

type Account @entity {
    # Address
    id: ID!

    # Total votes for StakedTokenMTA
    totalVotesMTA: BigInt!

    # Total votes for StakedTokenBPT
    totalVotesBPT: BigInt!

    # Addition of totalVotesBPT and totalVotesBPT
    totalVotesAll: BigInt!

    # Last timestamp at which the user made a write action to this contract
    lastAction: Int!

    # Permanent multiplier applied to an account, awarded for PERMANENT QuestTypes
    permMultiplier: Int!

    # multiplier that decays after each "season" (~9 months) by 75%, to avoid multipliers getting out of control
    seasonMultiplier: Int!

    completedQuests: [CompletedQuest!]! @derivedFrom(field: "account")

    stakedTokenAccounts: [StakedTokenAccount!]! @derivedFrom(field: "account")

    delegators: [StakedTokenAccount!]! @derivedFrom(field: "delegatee")
}

type StakedTokenAccount @entity {
    # ${address}.${stakedTokenAddress}
    id: ID!

    account: Account!

    stakedToken: StakedToken!

    balance: StakedTokenBalance!

    delegatee: Account

    rewardPerTokenPaid: BigInt

    rewards: BigInt
}

type QuestManager @entity {
    id: ID!

    # Current Season
    season: Season!

    # A whitelisted questMaster who can administer quests including signing user quests are completed.
    questMaster: Bytes!

    # Account that can sign a user's quest as being completed.
    questSigner: Bytes
}
